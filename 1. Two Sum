https://leetcode.com/problems/two-sum/
https://medium.com/@AlexanderObregon/solving-the-two-sum-problem-on-leetcode-a-java-walkthrough-3388ce0186e4

class Solution {
    public int[] twoSum(int[] nums, int target) {
       HashMap<Integer,Integer> hm=new HashMap();
        for(int i=0;i<nums.length;i++)
        {
            hm.put(nums[i],i);
        }
        //search in hashmap
        for(int i=0; i<nums.length; i++)
        {
            int num=nums[i];
            int rem=target-num;
            if(hm.containsKey(rem))
            {
                int index=hm.get(rem);
                if(index==i){
                    continue;
                }
                return new int[]{i, index};
            }
        } 
        return new int[]{};
    }
}






class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hm=new HashMap();
        for(int i=0; i<nums.length; i++)
        {
            hm.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++)
        {
            int num=nums[i];
            int rem=target-num;
            if(hm.containsKey(rem) && hm.get(rem)!=i)
            {
                return new int[]{i,hm.get(rem)};
            }
        }
        return null;
    }
}




class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hm=new HashMap();
        for(int i=0; i<nums.length; i++)
        {
            int rem=target-nums[i];
            if(hm.containsKey(rem))
            {
                return new int[]{hm.get(rem),i};
            }
            hm.put(nums[i],i);
        }
        return null;
    }
}





DSA:

1 two sum
1. brute force:
 for(i=0; i<n; i++)
{
for(j=0,j<n;j++)
{
if(i==j)->cpntinue
if(arr[i]+arr[j]==target)
{
return i,j
}

nut then we are checking all items twice hence we should check one index forward means :

 for(i=0; i<n; i++)
{
for(j=i+1,j<n;j++)
{
if(arr[i]+arr[j]==target)
{
return i,j
}

This is the brute force O(n^2)
but we have to use more better solution

2. better soln: Hashing
we can trim n^2 better into N logN or N
better than n^2 will be iterating on element only once'
hence iterate it once and store it in hashmap

in hashmap we will store element and index
we will then again take a for loop- we will take num, calculate the remaining and check if containsKey(rem)- if yes we find the index of that and check if it does not match i..and return the i and index

if interviewer asks you to not use the hashmap then?

we can use the greedy approach:
3. Optimal solution:
use pointers- left and right pointer 




