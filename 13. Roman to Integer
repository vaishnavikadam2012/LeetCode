https://leetcode.com/problems/roman-to-integer/

class Solution {
    public int romanToInt(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int count = 0;
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        for(int i=0; i < s.length(); i++){
            if(i < s.length()-1 && map.get(s.charAt(i)) < map.get(s.charAt(i+1))){
                count = count-map.get(s.charAt(i));
            }
            else
            {
                count = count+map.get(s.charAt(i));
            }
        }
        return count;
    }
}


Trick: 
The key intuition lies in the fact that in Roman numerals,
when a smaller value appears before a larger value, it represents subtraction, 
while when a smaller value appears after or equal to a larger value, it represents addition.

coding tips: 
key=s.CharAt(i)
ans=ans+get(key): This is a method of the HashMap class in Java. 
It takes a key as input and returns the value associated with that key in the map.
